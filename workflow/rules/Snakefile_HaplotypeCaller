#!/usr/bin/env python3
# Authors: Shalabh Suman, Bari Ballew

"""HaplotyeCaller module of CGR germline variant calling pipeline
"""

if clusterMode == "gcp" or useRemoteFiles:
    from snakemake.remote.GS import RemoteProvider as GSRemoteProvider
    GS = GSRemoteProvider()


rule HC_call_variants:
    """Call gVCFs with GATK4
    Runs over each chrom in parallel if by_chrom is true
    """
    input:
        ref=path_sanitize(refGenome),
        i1=path_sanitize(refGenome + ".amb"),
        i2=path_sanitize(refGenome + ".ann"),
        i3=path_sanitize(refGenome + ".bwt"),
        i4=path_sanitize(refGenome + ".pac"),
        i5=path_sanitize(refGenome + ".sa"),
        i6=path_sanitize(refGenome + ".fai"),
        i7=path_sanitize(dictionaryFile),
        bed="split_regions/{chrom}.bed" if by_chrom else bedFile,
        bam=lambda wc: path_sanitize(sample2bam[wc.sample]),
        bai=lambda wc: path_sanitize(sample2bam[wc.sample] + ".bai")
    output:
        gvcf=(
            temp("HaplotypeCaller/called/{chrom}/{sample}.g.vcf")
            if by_chrom
            else temp("HaplotypeCaller/called/{sample}.g.vcf")
        ),
        idx=(
            temp("HaplotypeCaller/called/{chrom}/{sample}.g.vcf.idx")
            if by_chrom
            else temp("HaplotypeCaller/called/{sample}.g.vcf.idx")
        )
    resources:
        machine_type="n1-standard-8",
        runtime=2880,
        mem_mb=8000
    threads: 4    
    benchmark:
        "run_times/HC_call_variants/{chrom}_{sample}.tsv" if by_chrom else "run_times/HC_call_variants/{sample}.tsv"
    conda:
        "../envs/gatk4.yaml"
    singularity: 'docker://quay.io/shukwong/gatk4:2020-12-09'     
    shell:
        'gatk --java-options "-Xmx8G" HaplotypeCaller \
                                    -R {input.ref} \
                                    -I {input.bam} \
                                    -ERC GVCF \
                                    -L {input.bed} \
                                    -O {output.gvcf} \
                                    -new-qual \
                                    -G StandardAnnotation \
                                    -G StandardHCAnnotation'


rule HC_compress_gvcfs:
    """Zip and index gVCFs
    """
    input:
        gvcf=(
            "HaplotypeCaller/called/{chrom}/{sample}.g.vcf"
            if by_chrom
            else "HaplotypeCaller/called/{sample}.g.vcf"
        ),
        idx=(
            "HaplotypeCaller/called/{chrom}/{sample}.g.vcf.idx"
            if by_chrom
            else "HaplotypeCaller/called/{sample}.g.vcf.idx"
        ),
    output:
        temp("HaplotypeCaller/called/{chrom}/{sample}.g.vcf.gz") if by_chrom else temp(
            "HaplotypeCaller/called/{sample}.g.vcf.gz"
        ),
        temp("HaplotypeCaller/called/{chrom}/{sample}.g.vcf.gz.tbi") if by_chrom else temp(
            "HaplotypeCaller/called/{sample}.g.vcf.gz.tbi"
        ),
    benchmark:
        "run_times/HC_compress_gvcfs/{chrom}_{sample}.tsv" if by_chrom else "run_times/HC_compress_gvcfs/{sample}.tsv"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"     
    conda:
        "../envs/environment.yaml"
    shell:
        "bgzip {input.gvcf}; tabix -p vcf {input.gvcf}.gz"


rule HC_concat_gvcfs:
    """
    Not clear whether it would be fastest to concat per-chrom gvcfs and
    then genotype, or genotype and then concat.
    """
    input:
        vcfList=expand("HaplotypeCaller/called/{chrom}/{{sample}}.g.vcf.gz", chrom=chromList),
        indexList=expand(
            "HaplotypeCaller/called/{chrom}/{{sample}}.g.vcf.gz.tbi", chrom=chromList
        ),
    output:
        gz="HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz",
    params:
        gvcfList=lambda wildcards, input: " -I ".join(input.vcfList),
    benchmark:
        "run_times/HC_concat_gvcfs/{sample}.tsv"
    conda:
        "../envs/gatk4.yaml"
    singularity: 'docker://quay.io/shukwong/gatk4:2020-12-09'     
    shell:
        'gatk --java-options "-Xmx4G" GatherVcfs -I {params.gvcfList} -O {output.gz}'


rule HC_index_gvcf:
    input:
        "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz",
    output:
        "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz.tbi",
    benchmark:
        "run_times/HC_index_gvcf/{sample}.tsv"
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"    
    shell:
        "tabix -p vcf {input}"


rule HC_create_each_sample_map_file:
    """Create sample file to be read by GenomicsDBImport

    Can pass all vcfs on the command line, each with a -V before it,
    but with enough samples you will hit the character limit.  Instead,
    create a sample map file and read from it.

    sample map is formatted as follows: sample_name--tab--path_to_sample_vcf per line

    See GATK's documentation for additional details.
    """
    input:
        gvcf=(
            "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz"
            if by_chrom
            else "HaplotypeCaller/called/{sample}.g.vcf.gz"
        ),
        index=(
            "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz.tbi"
            if by_chrom
            else "HaplotypeCaller/called/{sample}.g.vcf.gz.tbi"
        ),
    output:
        temp("HaplotypeCaller/DBImport/{sample}.map"),
    benchmark:
        "run_times/create_sample_map/{sample}.tsv"
    conda:
        "../envs/environment.yaml"
    singularity: "docker://quay.io/shukwong/bcftools:2020-12-09"       
    shell:
        "n=$(bcftools query -l {input.gvcf});"
        'echo "${{n}}\t{input.gvcf}" > {output}'


rule HC_create_cohort_map_file:
    input:
        expand("HaplotypeCaller/DBImport/{sample}.map", sample=sampleList),
    output:
        "HaplotypeCaller/DBImport/cohort.sample_map",
    params:
        mapDir=outputDir + "HaplotypeCaller/DBImport/",
    benchmark:
        "run_times/create_cohort_map_file.tsv"
    conda:
        "../envs/environment.yaml"
    shell:
        "for i in {params.mapDir}*.map; do cat $i >> {output}; done"


rule combine_gvcfs:
    input:
        ref=path_sanitize(refGenome),
        i1=path_sanitize(refGenome + ".amb"),
        i2=path_sanitize(refGenome + ".ann"),
        i3=path_sanitize(refGenome + ".bwt"),
        i4=path_sanitize(refGenome + ".pac"),
        i5=path_sanitize(refGenome + ".sa"),
        i6=path_sanitize(refGenome + ".fai"),
        i7=path_sanitize(dictionaryFile),
        bed=path_sanitize(bedFile),
        gvcf=(
            expand("HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz", sample=sampleList)
            if by_chrom
            else expand("HaplotypeCaller/called/{sample}.g.vcf.gz", sample=sampleList)
        ),
        index=(
            expand("HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz.tbi", sample=sampleList)
            if by_chrom
            else expand("HaplotypeCaller/called/{sample}.g.vcf.gz.tbi", sample=sampleList)
        ),
    output:
        gvcf="HaplotypeCaller/called/all_chroms.g.vcf.gz",
        idx="HaplotypeCaller/called/all_chroms.g.vcf.gz.tbi",
    params:
        gvcf=(
            list(
                map(
                    "-V {}".format,
                    expand(
                        outputDir + "HaplotypeCaller/called/{sample}_all_chroms.g.vcf.gz",
                        sample=sampleList,
                    ),
                )
            )
            if by_chrom
            else list(
                map(
                    "-V {}".format,
                    expand(
                        outputDir + "HaplotypeCaller/called/{sample}.g.vcf.gz", sample=sampleList
                    ),
                )
            )
        ),
    log:
        "logs/gatk/combinegvcfs.log",
    resources:
        runtime=2880,
        mem_mb=2048
    threads: 4
    conda:
        "../envs/gatk4.yaml"
    singularity: 'docker://quay.io/shukwong/gatk4:2020-12-09' 
    shell:
        'gatk --java-options "-Xmx16G" CombineGVCFs \
                                {params.gvcf} \
                                -R {input.ref} \
                                -O {output.gvcf} '


rule HC_genotype_gvcfs:
    input:
        ref=path_sanitize(refGenome),
        i1=path_sanitize(refGenome + ".amb"),
        i2=path_sanitize(refGenome + ".ann"),
        i3=path_sanitize(refGenome + ".bwt"),
        i4=path_sanitize(refGenome + ".pac"),
        i5=path_sanitize(refGenome + ".sa"),
        i6=path_sanitize(refGenome + ".fai"),
        i7=path_sanitize(dictionaryFile),
        bed=path_sanitize(bedFile),
        gvcf="HaplotypeCaller/called/all_chroms.g.vcf.gz",
        idx="HaplotypeCaller/called/all_chroms.g.vcf.gz.tbi",
    output:
        vcf="HaplotypeCaller/genotyped/all_chroms.vcf.gz",
        idx="HaplotypeCaller/genotyped/all_chroms.vcf.gz.tbi",
    log:
        "logs/gatk/genotypegvcfs.log",
    params:
        interval="{chrom}",
    resources:
        mem_mb=2048
    conda:
        "../envs/gatk4.yaml"
    singularity: 'docker://quay.io/shukwong/gatk4:2020-12-09'    
    shell:
        'gatk --java-options "-Xmx20G" GenotypeGVCFs \
                              -V {input.gvcf} \
                              -R {input.ref} \
                              -O {output.vcf} \
                              -stand-call-conf 30 \
                                    -new-qual \
                                    -G StandardAnnotation \
                                    -G StandardHCAnnotation \
                                    -L {params.interval}'

